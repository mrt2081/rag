services:
  traefik:
    image: "traefik:v3.1"
    ports:
      - 80:80
      - 443:443
    labels:
      - traefik.enable=true
      - traefik.docker.network=ragapp-network
      # Resolve TLS cert for domain - but except localhost
      - traefik.http.routers.traefik.rule=Host(`${DOMAIN}`) && HostRegexp(`{domain:.*}`)
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      # Keycloak OpenID plugin configuration
      - traefik.http.middlewares.ragapp-keycloakopenid.plugin.keycloakopenid.KeycloakURL=http${TLS:+s}://${DOMAIN}/auth
      - traefik.http.middlewares.ragapp-keycloakopenid.plugin.keycloakopenid.ClientID=ragapp
      # Secret from the example ragapp keycloak realm
      - traefik.http.middlewares.ragapp-keycloakopenid.plugin.keycloakopenid.ClientSecret=sNfRtplPJ1BLHUBUaPjKufNqLp1A6Re2 # Predefined secret for the example realm
      - traefik.http.middlewares.ragapp-keycloakopenid.plugin.keycloakopenid.KeycloakRealm=ragapp # Example realm
      - traefik.http.middlewares.ragapp-keycloakopenid.plugin.keycloakopenid.Scope=openid
      # Admin authentication middleware
      # 1. Use Keycloak user with role admin-manager
      # Set UserClaimName and UserHeaderName to extract roles from the token and set them in the header for authorization
      - traefik.http.middlewares.ragapp-keycloakopenid.plugin.keycloakopenid.UserClaimName=X-Forwarded-Roles
      - traefik.http.middlewares.ragapp-keycloakopenid.plugin.keycloakopenid.UserHeaderName=roles
      # Use headauth plugin to check if the user has exactly the role admin-manager
      - traefik.http.middlewares.admin-auth.plugin.headauth.header.name=roles
      - traefik.http.middlewares.admin-auth.plugin.headauth.allowed[0]=[admin-manager]
      - traefik.http.middlewares.admin-auth.plugin.headauth.methods[0]=GET
      - traefik.http.middlewares.admin-auth.plugin.headauth.methods[1]=POST
      - traefik.http.middlewares.admin-auth.plugin.headauth.methods[2]=PUT
      - traefik.http.middlewares.admin-auth.plugin.headauth.methods[3]=DELETE
      # 2. Alternative, we can just basicAuth for admin access. Please comment out the Keycloak middleware above and uncomment the following lines
      # username: admin, password: admin
      # - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME:-admin}:${HASHED_PASSWORD:-$$apr1$$3gG256rA$$BomHrC/uMhL807k/t7Wd6/}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${STATE_DIR}/traefik:/opt/traefik/config
    command:
      - --configFile=/opt/traefik/config/traefik.yml
      - --log.level=DEBUG
    networks:
      - ragapp-network

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.2
    command: start-dev --import-realm --hostname=http${TLS:+s}://${DOMAIN}/auth
    ports:
      - 8080:8080
    labels:
      - traefik.enable=true
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
      - traefik.http.routers.keycloak.rule=Host(`${DOMAIN}`) && PathPrefix(`/auth`)
      - traefik.http.middlewares.keycloak-strip-path.stripprefix.prefixes=/auth
      - traefik.http.routers.keycloak.middlewares=keycloak-strip-path
    environment:
      # Keycloak admin user (with all permissions to all realms)
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    volumes:
      # Mount example realm data
      - ${STATE_DIR}/keycloak/example/:/opt/keycloak/data/
    networks:
      - ragapp-network
    depends_on:
      - traefik

  manager:
    image: ${MANAGER_IMAGE:-ragapp/manager:latest}
    build: ../../src/manager
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the state folder to the manager
      # Note: The container path `/app/data`, must be the same as the STATE_DIR_LOCAL
      - ${STATE_DIR}:/app/data
    environment:
      - BASE_URL=/manager
      - RAGAPP_IMAGE=${RAGAPP_IMAGE:-ragapp/ragapp:latest}
      - CHAT_REQUEST_LIMIT_THRESHOLD=20
      # The path in host machine where the state is stored (needed for creating volumes dynamically)
      - STATE_DIR=${STATE_DIR}
      # The path of the state inside of the manager container
      - STATE_DIR_LOCAL=/app/data
      # Tracking script
      - TRACKING_SNIPPET=${TRACKING_SNIPPET:-}
    labels:
      - traefik.enable=true
      - traefik.http.services.app.loadbalancer.server.port=8000
      - traefik.http.routers.admin-manager.rule=Host(`${DOMAIN}`) && PathPrefix(`/manager`)
      - traefik.http.middlewares.strip-manager-path.stripprefix.prefixes=/manager
      - traefik.http.routers.admin-manager.middlewares=ragapp-keycloakopenid,admin-auth,strip-manager-path
    networks:
      - ragapp-network
    depends_on:
      - traefik
      - keycloak

  api-wrapper:
    image: ${API_WRAPPER_IMAGE:-rag-api-wrapper:latest}
    build: ../../src/api-wrapper
    env_file:
      - ./.env
    labels:
      - traefik.enable=true

      # --- HTTP Service (for Strapi Admin / non-WS traffic) ---
      - "traefik.http.services.api-wrapper-http.loadbalancer.server.port=1337"
      # Define router for HTTP traffic (explicitly lower priority for WS path)
      - "traefik.http.routers.api-wrapper-http.rule=Host(`${WRAPPER_DOMAIN}`)"
      - "traefik.http.routers.api-wrapper-http.priority=1" # Lower priority
      - "traefik.http.routers.api-wrapper-http.service=api-wrapper-http"
      - "traefik.http.routers.api-wrapper-http.entrypoints=websecure"
      - "traefik.http.routers.api-wrapper-http.tls.certresolver=letsencrypt"

      # --- WebSocket Service ---
      - "traefik.http.services.api-wrapper-ws.loadbalancer.server.port=1337"
      # Uncomment ONLY if backend requires explicit ws:// connection or has self-signed cert issues:
      # - "traefik.http.services.api-wrapper-ws.loadbalancer.server.scheme=ws"
      # - "traefik.http.services.api-wrapper-ws.loadbalancer.server.transport=insecure"
      # Define router for WebSocket traffic (higher priority)
      - "traefik.http.routers.api-wrapper-ws.rule=Host(`${WRAPPER_DOMAIN}`) && PathPrefix(`/socket.io/`)"
      - "traefik.http.routers.api-wrapper-ws.priority=10" # Higher priority
      - "traefik.http.routers.api-wrapper-ws.service=api-wrapper-ws"
      - "traefik.http.routers.api-wrapper-ws.entrypoints=websecure"
      - "traefik.http.routers.api-wrapper-ws.tls.certresolver=letsencrypt"
    networks:
      - ragapp-network
    depends_on:
      - traefik

networks:
  ragapp-network:
    name: ragapp-network
    # Set as an external network to avoid conflicts.
    external: true
